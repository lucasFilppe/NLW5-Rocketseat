{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/decom/\\xC1rea de Trabalho/NLW5-Rocketseat/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      togglePlay,\n      toggleLoop,\n      toggleShuffle,\n      playList,\n      playNext,\n      playPrevious,\n      hasNext,\n      hasPrevious,\n      clearPlayerState,\n      setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 7\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/decom/Área de Trabalho/NLW5-Rocketseat/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","clearPlayerState","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import {createContext, useState, ReactNode, useContext} from 'react';\n\n\ntype Episode ={\n   title: string; \n   members: string;\n   thumbnail: string;\n   duration: number;\n   url: string;\n}\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    isLooping: boolean;\n    isShuffling: boolean;\n    playList:( list: Episode[], index: number) => void;\n    play:( episode: Episode) => void;\n    setPlayingState: (state: boolean) => void;\n    togglePlay:() => void;\n    toggleLoop:() => void;\n    toggleShuffle:() => void;\n    playNext:() => void;\n    playPrevious:() => void;\n    clearPlayerState:() => void;\n    hasNext: boolean;\n    hasPrevious: boolean;\n\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderprops = {\n  children: ReactNode;\n}\n\nexport function PlayerContextProvider ({children}: PlayerContextProviderprops){\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLooping, setIsLooping] = useState(false);\n    const [isShuffling, setIsShuffling] = useState(false);\n  \n    function play(episode) {\n      setEpisodeList([episode]);\n      setCurrentEpisodeIndex(0);\n      setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index:number){\n      setEpisodeList(list);\n      setCurrentEpisodeIndex(index);\n      setIsPlaying(true);\n    }\n  \n    function togglePlay(){\n      setIsPlaying(!isPlaying);\n    }\n\n    function toggleLoop(){\n      setIsLooping(!isLooping);\n    }\n\n    function toggleShuffle(){\n      setIsShuffling(!isShuffling);\n    }\n\n  \n    function setPlayingState(state: boolean){\n      setIsPlaying(state);\n    }\n\n    function clearPlayerState(){\n      setEpisodeList([]);\n      setCurrentEpisodeIndex(0);\n    }\n\n    const hasPrevious =currentEpisodeIndex > 0;\n    const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length\n\n\n    function playNext() {\n     if(isShuffling){\n       const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n       setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n     }\n     \n      else if(hasNext){\n        setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n      }\n    }\n\n    function playPrevious(){\n      if(hasPrevious){\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n      }\n    }\n  \n    return (\n  \n      <PlayerContext.Provider value = {{\n        episodeList, \n        currentEpisodeIndex, \n        play,\n         isPlaying,\n         isLooping,\n         isShuffling, \n         togglePlay,\n          toggleLoop,\n          toggleShuffle,\n         playList,\n         playNext,\n         playPrevious,\n         hasNext,\n         hasPrevious,\n         clearPlayerState,\n          setPlayingState}}\n          >\n        {children}\n        </PlayerContext.Provider>\n    )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}